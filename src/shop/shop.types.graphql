type Query {
  shops: [Shop]
  shop(id: ID!): Shop
  usershops: [UserShops]
  usershop: UserShops
}

type Mutation {
  createShop(data: ShopCreateInput!): Shop
  updateShop(id: ID!, data: ShopUpdateInput!): Boolean
  deleteShop(id: ID!): Boolean

  createUserShop(data: UserShopCreateInput!): UserShops
}


type Shop {
  id: Int
  name: String!
  description: String
  logo: String
  banner: String
#   products: [Product]

}

type Role {
  id: Int
  role: String
}

type UserShops {
  id: Int
  user: User
  shop: Shop
  role: Role
}


input ShopCreateInput {
  name: String!
  description: String
  logo: String
  banner: String
}

input ShopUpdateInput {
  name: String
  description: String
  logo: String
  banner: String
}

input UserShopCreateInput {
  user: Int # primary key of UserEntity
  shop: Int # primary key of ShopEntity
  role: Int # primary key of RoleEntity
}